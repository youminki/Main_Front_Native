import React, { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { Picker } from '@react-native-picker/picker';
import Button from '../components/Button01';
import InputField from '../components/InputField';
import ReusableModal from '../components/ReusableModal';
import { CustomSelect } from '../components/CustomSelect';
import { findEmail } from '../api/user/userApi';

// 전화번호 포맷 함수
const formatPhone = (digits: string) => {
  const part1 = digits.slice(0, 3);
  const part2 = digits.length > 3 ? digits.slice(3, 7) : '';
  const part3 = digits.length > 7 ? digits.slice(7, 11) : '';
  return [part1, part2, part3].filter(Boolean).join('-');
};

// Validation schema: 이름, 태어난 해, 전화번호
const schemaFindId = yup.object().shape({
  name: yup
    .string()
    .required('이름을 입력해주세요.')
    .max(10, '이름은 최대 10자까지 입력 가능합니다.')
    .matches(/^[가-힣]+$/, '이름은 한글만 입력 가능합니다.'),
  birthYear: yup
    .string()
    .required('태어난 해를 선택해주세요.')
    .matches(/^\d{4}$/, '태어난 해는 4자리 숫자여야 합니다.'),
  phone: yup
    .string()
    .required('전화번호를 입력해주세요.')
    .matches(
      /^\d{3}-\d{4}-\d{4}$/,
      '유효한 전화번호 형식(010-1234-5678)이어야 합니다.'
    ),
});

type FormValues = yup.InferType<typeof schemaFindId>;

const currentYear = new Date().getFullYear();
const years = Array.from({ length: 100 }, (_, i) => String(currentYear - i));

const FindId: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [userEmail, setUserEmail] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const navigation = useNavigation<any>();

  const {
    control,
    handleSubmit,
    formState: { errors, isValid, isSubmitting },
  } = useForm<FormValues>({
    resolver: yupResolver(schemaFindId),
    mode: 'onChange',
    defaultValues: { name: '', birthYear: '', phone: '' },
  });

  // 이메일 마스킹 함수
  const maskEmail = (email: string) => {
    const [local, domain] = email.split('@');
    const masked = local.slice(0, 2) + '*****';
    return `${masked}@${domain}`;
  };

  // 폼 제출 핸들러
  const handleFindAccount = async (data: FormValues) => {
    setErrorMessage('');
    try {
      const { email } = await findEmail({
        name: data.name,
        birthYear: data.birthYear,
        phoneNumber: data.phone,
      });
      setUserEmail(maskEmail(email));
      setIsModalOpen(true);
    } catch (error: unknown) {
      setErrorMessage(
        error instanceof Error ? error.message : '이메일 찾기에 실패했습니다.'
      );
      setIsModalOpen(true);
    }
  };

  const closeModal = () => setIsModalOpen(false);

  return (
    <ScrollView style={styles.container}>
      <View style={styles.form}>
        <View style={styles.row}>
          <Controller
            name='name'
            control={control}
            render={({ field }) => (
              <InputField
                label='이름'
                placeholder='홍길동'
                error={errors.name?.message}
                value={field.value}
                onChangeText={(text: string) => {
                  const onlyKorean = text.replace(/[^가-힣]/g, '');
                  field.onChange(onlyKorean);
                }}
              />
            )}
          />
          <Controller
            name='birthYear'
            control={control}
            render={({ field }) => (
              <View style={styles.pickerContainer}>
                <Text style={styles.label}>태어난 해</Text>
                <Picker
                  selectedValue={field.value}
                  onValueChange={field.onChange}
                  style={styles.picker}
                >
                  <Picker.Item label='선택하세요' value='' />
                  {years.map((year) => (
                    <Picker.Item key={year} label={year} value={year} />
                  ))}
                </Picker>
                {errors.birthYear && (
                  <Text style={styles.errorText}>
                    {errors.birthYear.message}
                  </Text>
                )}
              </View>
            )}
          />
        </View>

        <Controller
          name='phone'
          control={control}
          render={({ field }) => (
            <InputField
              label='전화번호'
              placeholder='010-1234-5678'
              error={errors.phone?.message}
              value={field.value}
              onChangeText={(text: string) => {
                const digits = text.replace(/\D/g, '').slice(0, 11);
                const formatted = formatPhone(digits);
                field.onChange(formatted);
              }}
            />
          )}
        />

        {errorMessage && <Text style={styles.errorText}>{errorMessage}</Text>}

        <Button
          title={isSubmitting ? '조회 중...' : '아이디 찾기'}
          onPress={handleSubmit(handleFindAccount)}
          disabled={!isValid || isSubmitting}
        />
      </View>

      <ReusableModal
        isOpen={isModalOpen}
        onClose={closeModal}
        title='아이디 찾기 결과'
      >
        <Text>입력하신 정보로 찾은 이메일은 아래와 같습니다.</Text>
        <Text style={styles.emailText}>{userEmail}</Text>
      </ReusableModal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
    padding: 16,
  },
  form: {
    flexDirection: 'column',
  },
  row: {
    flexDirection: 'row',
    gap: 16,
  },
  pickerContainer: {
    flex: 1,
  },
  label: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  picker: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    backgroundColor: '#fff',
  },
  errorText: {
    color: '#e74c3c',
    fontSize: 14,
    marginTop: 4,
  },
  emailText: {
    fontWeight: 'bold',
    marginTop: 8,
    fontSize: 18,
    color: '#2ecc71',
  },
});

export default FindId;
